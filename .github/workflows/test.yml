name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov=rules --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
  
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8
      
      - name: Check formatting with black
        run: black --check src/ rules/ tests/
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ rules/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ rules/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
  
  integration:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML
      
      - name: Make claudelint executable
        run: chmod +x claudelint
      
      - name: Test --version
        run: ./claudelint --version
      
      - name: Test --list-rules
        run: ./claudelint --list-rules
      
      - name: Test --init
        run: |
          cd /tmp
          $GITHUB_WORKSPACE/claudelint --init
          test -f .claudelint.yaml
      
      - name: Clone ai-helpers for integration test
        uses: actions/checkout@v4
        with:
          repository: openshift-eng/ai-helpers
          path: test-repo
      
      - name: Run linter on ai-helpers
        run: ./claudelint test-repo

